<?php
// dh/install.php
declare(strict_types=1);

// Start session if not already started
if (session_status() == PHP_SESSION_NONE) {
    @session_start(); // Use @ to suppress headers already sent warning if any previous output
}

// --- Installation Constants (used only within this script) ---
define('APP_ROOT_PATH_INSTALL', __DIR__);
define('CONFIG_FILE_PATH_INSTALL', APP_ROOT_PATH_INSTALL . '/app/core/config.php');
define('SCHEMA_SQL_PATH_INSTALL', APP_ROOT_PATH_INSTALL . '/app/core/schema.sql'); // Correct constant name
define('INSTALL_LOCK_FILE_INSTALL', APP_ROOT_PATH_INSTALL . '/app/core/.install_lock');

// --- Helper function for this script ---
function install_escape_html(?string $string): string {
    if ($string === null) return '';
    return htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
}

function install_redirect(string $location): void {
    header("Location: " . $location);
    exit;
}

$current_install_step = $_GET['step'] ?? 'check_requirements';
$install_view_error = $_SESSION['install_view_error'] ?? null;
$install_view_success = $_SESSION['install_view_success'] ?? null;
unset($_SESSION['install_view_error'], $_SESSION['install_view_success']);

$db_connection_install = null;

// --- Step 0: Initial check / Pre-installation checks ---
if ($current_install_step === 'check_requirements') {
    $php_version_ok = version_compare(PHP_VERSION, '7.4.0', '>=');
    $pdo_mysql_ok = extension_loaded('pdo_mysql');
    $mbstring_ok = extension_loaded('mbstring');
    $app_core_writable = is_writable(APP_ROOT_PATH_INSTALL . '/app/core/');

    if (file_exists(INSTALL_LOCK_FILE_INSTALL) && file_exists(CONFIG_FILE_PATH_INSTALL)) {
        $_SESSION['install_view_success'] = "系统似乎已经安装。如果需要重新安装，请手动删除 <code>app/core/.install_lock</code> 和 <code>app/core/config.php</code> 文件，并清空数据库。";
        install_redirect('install.php?step=complete');
    }
    require APP_ROOT_PATH_INSTALL . '/app/views/installation/s0_requirements_check.php';
    exit;
}

// --- Step 1: Database and Site Configuration (Form submission) ---
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action_install_config'])) {
    if ($current_install_step !== 'db_config_form' && !(isset($_GET['step']) && $_GET['step'] === 'db_config_form') ) {
        $_SESSION['install_view_error'] = "无效的安装步骤提交。";
        install_redirect('install.php?step=db_config_form');
    }
    
    $db_host = $_POST['db_host'] ?? 'localhost';
    $db_name = trim($_POST['db_name'] ?? '');
    $db_user = trim($_POST['db_user'] ?? '');
    $db_pass = $_POST['db_pass'] ?? '';
    $site_name_post = trim($_POST['site_name'] ?? '我的导航');
    if (empty($site_name_post)) $site_name_post = '我的导航';
    $admin_user_post = trim($_POST['admin_username'] ?? 'admin');
    if (empty($admin_user_post)) $admin_user_post = 'admin';
    $admin_pass_post = $_POST['admin_password'] ?? '1111';
    if (empty($admin_pass_post)) $admin_pass_post = '1111';

    if (empty($db_name) || empty($db_user)) {
        $_SESSION['install_view_error'] = "数据库名称和用户名不能为空。";
        install_redirect('install.php?step=db_config_form');
    }

    $config_content_install = "<?php\n// app/core/config.php - Generated by installer\n\n";
    $config_content_install .= "define('DB_HOST', '" . addslashes($db_host) . "');\n";
    $config_content_install .= "define('DB_NAME', '" . addslashes($db_name) . "');\n";
    $config_content_install .= "define('DB_USER', '" . addslashes($db_user) . "');\n";
    $config_content_install .= "define('DB_PASS', '" . addslashes($db_pass) . "');\n";
    $config_content_install .= "define('DB_CHARSET', 'utf8mb4');\n\n";
    $config_content_install .= "define('APP_NAME', '" . addslashes($site_name_post) . "');\n";
    $config_content_install .= "define('DEFAULT_USERNAME', '" . addslashes($admin_user_post) . "');\n";
    $config_content_install .= "define('INITIAL_PASSWORD', '" . addslashes($admin_pass_post) . "');\n\n";
    $config_content_install .= "error_reporting(E_ALL);\nini_set('display_errors', '1');\n\n";
    $config_content_install .= "if (session_status() == PHP_SESSION_NONE) { @session_start(); }\n?>";

    if (@file_put_contents(CONFIG_FILE_PATH_INSTALL, $config_content_install) === false) {
        $_SESSION['install_view_error'] = "无法写入配置文件 <code>" . CONFIG_FILE_PATH_INSTALL . "</code>。<br>请确保 <code>app/core/</code> 目录对PHP脚本可写，或手动创建。内容:<br><pre>" . install_escape_html($config_content_install) . "</pre>";
        install_redirect('install.php?step=db_config_form');
    }
    if (file_exists(INSTALL_LOCK_FILE_INSTALL)) {
        @unlink(INSTALL_LOCK_FILE_INSTALL);
    }
    $_SESSION['install_view_success'] = "配置文件已保存。";
    install_redirect('install.php?step=test_db_connection');
}

// --- Main Step Handling ---
switch ($current_install_step) {
    case 'db_config_form':
        $config_exists_for_view = file_exists(CONFIG_FILE_PATH_INSTALL);
        require APP_ROOT_PATH_INSTALL . '/app/views/installation/s1_db_config_form.php';
        break;

    case 'test_db_connection':
        if (!file_exists(CONFIG_FILE_PATH_INSTALL)) {
            $_SESSION['install_view_error'] = "配置文件不存在。";
            install_redirect('install.php?step=db_config_form');
        }
        require_once CONFIG_FILE_PATH_INSTALL;
        require_once APP_ROOT_PATH_INSTALL . '/app/core/database.php';
        
        try {
            $db_connection_install = getDBConnection(); // This will die with a message on failure
            $_SESSION['install_view_success'] = "数据库连接成功！";
            install_redirect('install.php?step=create_tables');
        } catch (Exception $e) { // Should ideally not be reached if getDBConnection dies.
            $_SESSION['install_view_error'] = "数据库连接失败。请检查配置。详细错误: " . install_escape_html($e->getMessage());
            install_redirect('install.php?step=db_config_form&retry=1');
        }
        break;

    case 'create_tables': // This is where line 127 was
        if (!file_exists(CONFIG_FILE_PATH_INSTALL)) { 
            $_SESSION['install_view_error'] = "配置文件不存在，请先配置数据库。";
            install_redirect('install.php?step=db_config_form'); 
        }
        // Use correct constant name for schema file
        if (!file_exists(SCHEMA_SQL_PATH_INSTALL)) { // << CORRECTED HERE
            $_SESSION['install_view_error'] = "关键文件 <code>app/core/schema.sql</code> 未找到！无法创建表。请确保此文件已上传。";
            require APP_ROOT_PATH_INSTALL . '/app/views/installation/s2_tables_status.php';
            exit;
        }
        require_once CONFIG_FILE_PATH_INSTALL;
        require_once APP_ROOT_PATH_INSTALL . '/app/core/database.php';
        $db_table_creation_error_view = null;
        try {
            $db_connection_install = getDBConnection();
            $checkTablesStmt = $db_connection_install->query("SHOW TABLES LIKE 'users'");
            if ($checkTablesStmt->rowCount() > 0) {
                 $_SESSION['install_view_success'] = "数据库表似乎已存在。跳过创建表步骤。";
                 install_redirect('install.php?step=init_user_settings');
            }

            // Use correct constant name for schema file
            $sql_commands = file_get_contents(SCHEMA_SQL_PATH_INSTALL); // << CORRECTED HERE
            $db_connection_install->exec($sql_commands);
            $_SESSION['install_view_success'] = "数据库表创建成功！";
            install_redirect('install.php?step=init_user_settings');
        } catch (PDOException $e) {
            $db_table_creation_error_view = "创建表时出错: " . install_escape_html($e->getMessage());
            $_SESSION['install_view_error'] = $db_table_creation_error_view;
        }
        require APP_ROOT_PATH_INSTALL . '/app/views/installation/s2_tables_status.php';
        exit; 
        break;

    case 'init_user_settings':
        if (!file_exists(CONFIG_FILE_PATH_INSTALL)) { install_redirect('install.php?step=db_config_form'); }
        require_once CONFIG_FILE_PATH_INSTALL;
        require_once APP_ROOT_PATH_INSTALL . '/app/core/database.php';
        require_once APP_ROOT_PATH_INSTALL . '/app/core/auth.php';
        $init_user_error_view = null;
        try {
            $db_connection_install = getDBConnection();
            $init_status = checkAndInitializeUser($db_connection_install);

            if ($init_status === "created") {
                $_SESSION['install_view_success'] = "初始管理员账户和设置创建成功！";
            } elseif ($init_status === "exists") {
                $_SESSION['install_view_success'] = "管理员账户已存在。";
            } else {
                $init_user_error_view = "初始化出错 (" . install_escape_html($init_status) . ")。";
                $_SESSION['install_view_error'] = $init_user_error_view;
                require APP_ROOT_PATH_INSTALL . '/app/views/installation/s3_init_status.php';
                exit;
            }
            if (@file_put_contents(INSTALL_LOCK_FILE_INSTALL, "OK " . date('Y-m-d H:i:s')) === false) {
                 $_SESSION['install_view_warning'] = "无法创建安装锁定文件。请手动删除 install.php。";
            }
            install_redirect('install.php?step=complete');

        } catch (PDOException $e) {
            $init_user_error_view = "初始化时数据库错误: " . install_escape_html($e->getMessage());
            $_SESSION['install_view_error'] = $init_user_error_view;
        }
        require APP_ROOT_PATH_INSTALL . '/app/views/installation/s3_init_status.php';
        exit; 
        break;

    case 'complete':
        if (!file_exists(CONFIG_FILE_PATH_INSTALL)) {
            install_redirect('install.php?step=check_requirements');
        }
        if (!file_exists(INSTALL_LOCK_FILE_INSTALL)) {
            @file_put_contents(INSTALL_LOCK_FILE_INSTALL, "Completed " . date('Y-m-d H:i:s'));
        }
        require_once CONFIG_FILE_PATH_INSTALL; 
        require APP_ROOT_PATH_INSTALL . '/app/views/installation/s_final_complete.php';
        break;
    
    default:
        $_SESSION['install_view_error'] = "无效的安装步骤。";
        install_redirect('install.php?step=check_requirements');
        break;
}
?>